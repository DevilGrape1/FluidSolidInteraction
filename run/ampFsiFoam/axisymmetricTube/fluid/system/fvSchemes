/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default Gauss linear;
    grad(p) Gauss linear;
}

divSchemes
{
    default         none;
//     div(phi,U) Gauss upwind;
    div(phi,U) Gauss linearUpwind cellLimited leastSquares 1;
//     div(phi,U) Gauss upwind;
//     div(phi,U) Gauss vanLeerVDC;
}

laplacianSchemes
{
    default         none;
    laplacian(nu,U) Gauss linear skewCorrected 1;

    laplacian((1|A(U)),p) Gauss linear skewCorrected 1;

    laplacian(diffusivity,cellMotionU) Gauss linear corrected;
    // laplacian(diffusivity,cellMotionU) Gauss linear skewCorrected 1;

//     laplacian((1|interpolate(AU)),p) Gauss linear skewCorrected 1;
//     laplacian((1|interpolate(AUt)),p) Gauss linear skewCorrected 1;

//     laplacian((1|interpolate(AUcorr)),p) Gauss linear skewCorrected 1;

    laplacian(rAU,p) Gauss linear skewCorrected 1;
    laplacian(p) Gauss linear skewCorrected 1;
}

interpolationSchemes
{
    default linear;
//     interpolate(y) linear;
    interpolate(U) leastSquaresSkewCorrected linear;
    interpolate(AU) leastSquaresSkewCorrected linear;
}

snGradSchemes
{
    default skewCorrected 1;
}

fluxRequired
{
    default         no;
    p;
}


// ************************************************************************* //
